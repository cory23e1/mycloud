# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'E:\bakalavr\diplom\mycloud\design.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtCore import *
#import design
import s3
from s3 import S3
import funcs as f
import os
import settings_form
from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    current_path = ''
    current_key = ''
    selected_key = ''

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1239, 722)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tv_cloudStorage = QtWidgets.QTreeView(self.centralwidget)
        self.tv_cloudStorage.setGeometry(QtCore.QRect(10, 50, 1221, 591))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.tv_cloudStorage.setFont(font)
        self.tv_cloudStorage.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.tv_cloudStorage.setObjectName("tv_cloudStorage")
        self.btn_back = QtWidgets.QPushButton(self.centralwidget)
        self.btn_back.setGeometry(QtCore.QRect(60, 10, 41, 31))
        self.btn_back.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("E:\\bakalavr\\diplom\\mycloud\\img/back-arrow_icon-icons.com_72866.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btn_back.setIcon(icon)
        self.btn_back.setObjectName("btn_back")
        self.btn_del = QtWidgets.QPushButton(self.centralwidget)
        self.btn_del.setGeometry(QtCore.QRect(1190, 10, 41, 31))
        self.btn_del.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("E:\\bakalavr\\diplom\\mycloud\\img/waste_bin_delete_remove_recycle_icon_123840.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btn_del.setIcon(icon1)
        self.btn_del.setObjectName("btn_del")
        self.btn_upload = QtWidgets.QPushButton(self.centralwidget)
        self.btn_upload.setGeometry(QtCore.QRect(1140, 10, 41, 31))
        self.btn_upload.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("E:\\bakalavr\\diplom\\mycloud\\img/cloud-upload-symbol-with-an-up-arrow-inside_icon-icons.com_56539.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btn_upload.setIcon(icon2)
        self.btn_upload.setObjectName("btn_upload")
        self.btn_home = QtWidgets.QPushButton(self.centralwidget)
        self.btn_home.setGeometry(QtCore.QRect(10, 10, 41, 31))
        self.btn_home.setText("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("E:\\bakalavr\\diplom\\mycloud\\img/home_icon-icons.com_73532.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btn_home.setIcon(icon3)
        self.btn_home.setObjectName("btn_home")
        self.btn_download = QtWidgets.QPushButton(self.centralwidget)
        self.btn_download.setGeometry(QtCore.QRect(1090, 10, 41, 31))
        self.btn_download.setText("")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("E:\\bakalavr\\diplom\\mycloud\\img/download-to-storage-drive_icon-icons.com_73590.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btn_download.setIcon(icon4)
        self.btn_download.setObjectName("btn_download")
        self.curr_directory_txt = QtWidgets.QLineEdit(self.centralwidget)
        self.curr_directory_txt.setGeometry(QtCore.QRect(110, 10, 971, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.curr_directory_txt.setFont(font)
        self.curr_directory_txt.setReadOnly(False)
        self.curr_directory_txt.setObjectName("curr_directory_txt")
        self.progressBar = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar.setGeometry(QtCore.QRect(10, 670, 1221, 23))
        self.progressBar.setProperty("value", 0)
        self.progressBar.setAlignment(QtCore.Qt.AlignJustify|QtCore.Qt.AlignVCenter)
        self.progressBar.setTextDirection(QtWidgets.QProgressBar.TopToBottom)
        self.progressBar.setObjectName("progressBar")
        self.progress_bar_lbl = QtWidgets.QLabel(self.centralwidget)
        self.progress_bar_lbl.setGeometry(QtCore.QRect(10, 650, 1221, 16))
        self.progress_bar_lbl.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.progress_bar_lbl.setObjectName("progress_bar_lbl")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1239, 21))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.HighlightedText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.HighlightedText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.HighlightedText, brush)
        self.menubar.setPalette(palette)
        self.menubar.setObjectName("menubar")
        self.menu = QtWidgets.QMenu(self.menubar)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        self.menu.setPalette(palette)
        self.menu.setObjectName("menu")
        MainWindow.setMenuBar(self.menubar)
        self.OpenSettinsAction = QtWidgets.QAction(MainWindow)
        self.OpenSettinsAction.setCheckable(False)
        self.OpenSettinsAction.setObjectName("OpenSettinsAction")
        self.menu.addAction(self.OpenSettinsAction)
        self.menubar.addAction(self.menu.menuAction())

        self.fill_object_table('', '')
        self.tv_cloudStorage.doubleClicked.connect(self.open_folder_or_download_obj_by_dblclck)
        self.tv_cloudStorage.clicked.connect(self.select_table_row)
        self.btn_home.clicked.connect(self.go_home)
        self.btn_back.clicked.connect(self.go_back)
        self.btn_upload.clicked.connect(self.upload_files_to_cloud)
        self.btn_del.clicked.connect(self.del_file_from_cloud)
        self.btn_download.clicked.connect(self.download_file_from_cloud)
        self.OpenSettinsAction.triggered.connect(self.open_settings_form)
        self.change_curr_path_txt("")
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)



    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "IntroScan Storage"))
        self.progress_bar_lbl.setText(_translate("MainWindow", "TextLabel"))
        self.menu.setTitle(_translate("MainWindow", "Файл"))
        self.OpenSettinsAction.setText(_translate("MainWindow", "Настройки"))

    def change_curr_path_txt(self,path):
        self.curr_directory_txt.setText("ist-pnipu-bukcet/"+path)
        #pass

    def open_settings_form(self):
        self.window = QMainWindow()
        self.ui = settings_form.Ui_MainWindow()
        self.ui.setupUi(self.window)
        self.window.show()

    def getOpenFilesAndDirs(parent=None, caption='', directory='', filter='', initialFilter='', options=None):
        def updateText():
            # update the contents of the line edit widget with the selected files
            selected = []
            for index in view.selectionModel().selectedRows():
                selected.append('"{}"'.format(index.data()))
            lineEdit.setText(' '.join(selected))

        dialog = QFileDialog(parent, windowTitle=caption)
        dialog.setFileMode(dialog.ExistingFiles)
        if options:
            dialog.setOptions(options)
        dialog.setOption(dialog.DontUseNativeDialog, True)
        if directory:
            dialog.setDirectory(directory)
        if filter:
            dialog.setNameFilter(filter)
            if initialFilter:
                dialog.selectNameFilter(initialFilter)

        # by default, if a directory is opened in file listing mode,
        # QFileDialog.accept() shows the contents of that directory, but we
        # need to be able to "open" directories as we can do with files, so we
        # just override accept() with the default QDialog implementation which
        # will just return exec_()
        dialog.accept = lambda: QDialog.accept(dialog)

        # there are many item views in a non-native dialog, but the ones displaying
        # the actual contents are created inside a QStackedWidget; they are a
        # QTreeView and a QListView, and the tree is only used when the
        # viewMode is set to QFileDialog.Details, which is not this case
        stackedWidget = dialog.findChild(QStackedWidget)
        view = stackedWidget.findChild(QListView)
        view.selectionModel().selectionChanged.connect(updateText)
        lineEdit = dialog.findChild(QLineEdit)
        # clear the line edit contents whenever the current directory changes
        dialog.directoryEntered.connect(lambda: lineEdit.setText(''))
        dialog.exec_()
        return dialog.selectedFiles()

    def upload_files_to_cloud(self):
        try:
            #открытие диалога выбора файлов
            filenames, ok = QFileDialog.getOpenFileNames(None,"Выберите несколько файлов",".","All Files(*.*)")
            #filenames = self.getOpenFilesAndDirs('', '', '', '')
            print(filenames)
            folder = os.path.dirname(filenames[0])
            print("folder =", folder)
            print("files =", filenames)
            #загрузка файлов в бакет
            S3.upload(None,'ist-pnipu-bucket', filenames)
            #обновление таблицы объектов
            self.fill_object_table(self.current_path, '')
            #вывод сообщения об успешной загрузке файлов
            f.ShowMessageBox('Успешно', 'Файлы ' + str(filenames) + ' были загружены')
        except IndexError as ex:
            pass
            #f.ShowMessageBox("Ошибка",str(ex))

    def download_file_from_cloud(self):
        # объявление пустого списка объектов
        file_names = []
        # подсчет количества строк в таблице объектов
        row_count = self.tv_cloudStorage.model().rowCount()
        # проверка на отсутствие объектов в бакете
        if row_count != 0:
            for row in range(row_count):
                check = self.tv_cloudStorage.model().item(row, 0).checkState()
                # проверка состояния чекбокса выбора
                if check == 2:
                    file_names.append(self.tv_cloudStorage.model().index(row, 1).data())
            # проверка если один из чекбоксов поменял состояние
            if not all(item == 0 for item in file_names):
                # скачивание файлов из бакета
                S3.download('ist-pnipu-bucket', file_names, self.current_path)
                #обновление списка объектов
                self.fill_object_table(self.current_path, '')
                #вывод сообщения об успешном сохранении на локальный диск
                f.ShowMessageBox('Успешно','Файлы '+str(file_names)+' сохранены на локальный диск')
            elif self.selected_key != '':
                file_names.append(self.selected_key)
                S3.download('ist-pnipu-bucket', file_names, self.selected_key)
                self.fill_object_table(self.current_path, '')
            else:
                f.ShowMessageBox('Сохранение','Не выбраны файлы для сохранения')
        else:
            f.ShowMessageBox('Сохранение','Нет файлов для сохранения')

    def del_file_from_cloud(self):
        file_names = []
        row_count = self.tv_cloudStorage.model().rowCount()
        if row_count != 0:
            for row in range(row_count):
                check = self.tv_cloudStorage.model().item(row, 0).checkState()
                if check == 2:
                    file_names.append(self.tv_cloudStorage.model().index(row, 1).data())
            if not all(item == 0 for item in file_names):
                S3.delete('ist-pnipu-bucket', file_names, self.current_path)
                self.fill_object_table(self.current_path, '')
                f.ShowMessageBox("Удаление", 'Файлы '+str(file_names)+' , были удалены')
            elif self.selected_key != '':
                file_names.append(self.selected_key)
                S3.delete('ist-pnipu-bucket', file_names, '')
                self.fill_object_table(self.current_path, '')
                f.ShowMessageBox("Удаление", 'Файл ' + str(file_names) + ' , был удален')
            else:
                f.ShowMessageBox("Удаление", 'не выбраны файлы')
        else:
            f.ShowMessageBox("Удаление", 'нет файлов для удаления')
            #print('нет файлов для удаления')

    def select_table_row(self):
        try:
            index = self.tv_cloudStorage.selectedIndexes()[1]
            object_name = index.model().itemFromIndex(index).text()
            print(object_name)
            self.selected_key = self.current_path+object_name
        except:
            pass

    def append_row_object_table(self, key, date, size, status):
        item0 = QStandardItem()
        item0.setCheckState(Qt.CheckState.Unchecked)
        item0.setCheckable(True)
        item1 = QStandardItem(key)
        item2 = QStandardItem(date)
        item3 = QStandardItem(size)
        item4 = QStandardItem(status)
        self.tv_cloudStorage.model().appendRow([item0, item1, item2, item3, item4])

    def fill_object_table(self, directory, delimiter):
        self.selected_key = ''
        model = QStandardItemModel()
        model.setHorizontalHeaderLabels(["Выбор", "Имя", "Дата", "Размер", "Состояние"])
        self.tv_cloudStorage.setModel(model)
        self.tv_cloudStorage.header().resizeSection(0, 50)
        self.tv_cloudStorage.header().resizeSection(1, 300)
        service_acc_id = f.get_val_in_local_storage('service_acc_id')
        try:
            # получение объектов из бакета
            data = S3.get_object_list('ist-pnipu-bucket', directory, delimiter)
            print("это из лок.хран - "+service_acc_id)
            for obj in data:
                key_name = obj['Key']
                object_owner = obj['Owner']['ID']
                print("это из с3 облака - "+object_owner)
                if object_owner == service_acc_id:
                    # проверка есть ли сейчас что то в переменной текущего пути
                    if self.current_path == "":
                        # проверка является ли объект папкой
                        if '/' in key_name:
                            if key_name.count('/') >= 2 or str(key_name).split('/')[1] != '':
                                # отсеивание объектов типа folder/object.jpg и.т.д
                                pass
                            else:
                                #вставка строки с данными объекта
                                self.append_row_object_table(key_name,str(obj['LastModified']),f.convert_size(obj['Size']),'облако')
                        else:
                            self.append_row_object_table(key_name, str(obj['LastModified']), f.convert_size(obj['Size']),'облако')
                    else:
                        # удаление имени папки в наименовании объекта если пользователь находится в папке
                        elem_of_split_key_name = ''
                        replaced_key_name = key_name.replace(self.current_path, '')
                        split_key_name = str(replaced_key_name).split('/')
                        if len(split_key_name) > 1:
                            if split_key_name[1] != '':
                                elem_of_split_key_name = split_key_name[1]
                        if replaced_key_name == self.current_path or replaced_key_name == '' or elem_of_split_key_name != '':
                            pass
                        else:
                            self.append_row_object_table(replaced_key_name, str(obj['LastModified']), f.convert_size(obj['Size']),'облако')
                else:
                    pass
        except Exception as error:
            pass
            #print(error)


    def open_folder_or_download_obj_by_dblclck(self):
        index = self.tv_cloudStorage.selectedIndexes()[1]
        #print(index)
        object_name = index.model().itemFromIndex(index).text()
        if object_name[len(object_name)-1] == '/':
            self.current_key = object_name
            self.current_path += object_name
            self.change_curr_path_txt(self.current_path)
            print('==============================================')
            print('Текущий директория - ' + self.current_path)
            print('Текущий ключ - ' + self.current_key)
            self.fill_object_table(self.current_path, '')
        else:
            file_names = []
            file_names.append(self.current_path+object_name)
            S3.download('ist-pnipu-bucket', file_names, object_name)
            #saved_file_path = "C:/storage/"+self.current_path+object_name
            saved_file_path = f.get_val_in_local_storage('local_path') + self.current_path + object_name
            os.startfile(saved_file_path)

    def go_home(self):
        self.current_key = ''
        self.current_path = ''
        self.change_curr_path_txt('')
        self.selected_key = ''
        self.fill_object_table('', '')

    def go_back(self):
        self.current_path = self.current_path.replace(self.current_key, '')
        self.change_curr_path_txt(self.current_path)
        self.current_key = self.current_path
        self.selected_key = ''
        print('==============================================')
        print('Текущий директория - ' + self.current_path)
        print('Текущий ключ - ' + self.current_key)
        self.fill_object_table(self.current_path, '')

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
