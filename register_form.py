# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'E:\bakalavr\diplom\mycloud\register_form.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtCore import *
from PyQt5 import QtCore, QtGui, QtWidgets
import requests
import database
import funcs as f
import auth_form

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(591, 358)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.fio_txt = QtWidgets.QLineEdit(self.centralwidget)
        self.fio_txt.setGeometry(QtCore.QRect(40, 80, 521, 20))
        self.fio_txt.setObjectName("fio_txt")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(240, 10, 121, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(40, 60, 47, 13))
        self.label_2.setObjectName("label_2")
        self.role_cmb = QtWidgets.QComboBox(self.centralwidget)
        self.role_cmb.setGeometry(QtCore.QRect(40, 130, 521, 22))
        self.role_cmb.setObjectName("role_cmb")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(40, 110, 61, 16))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(40, 170, 47, 13))
        self.label_4.setObjectName("label_4")
        self.login_txt = QtWidgets.QLineEdit(self.centralwidget)
        self.login_txt.setGeometry(QtCore.QRect(40, 190, 521, 20))
        self.login_txt.setObjectName("login_txt")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(40, 220, 47, 13))
        self.label_5.setObjectName("label_5")
        self.password_txt = QtWidgets.QLineEdit(self.centralwidget)
        self.password_txt.setGeometry(QtCore.QRect(40, 240, 521, 20))
        font = QtGui.QFont()
        font.setStrikeOut(False)
        self.password_txt.setFont(font)
        self.password_txt.setInputMask("")
        self.password_txt.setPlaceholderText("")
        self.password_txt.setObjectName("password_txt")
        self.register_btn = QtWidgets.QPushButton(self.centralwidget)
        self.register_btn.setGeometry(QtCore.QRect(190, 290, 231, 51))
        self.register_btn.setObjectName("register_btn")
        MainWindow.setCentralWidget(self.centralwidget)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.register_btn.clicked.connect(self.add_acc_to_bd)
        self.register_btn.clicked.connect(MainWindow.close)
        self.load_roles_from_bd()

    IAM_TOKEN = ''
    folder_id = ''

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "Регистрация"))
        self.label_2.setText(_translate("MainWindow", "ФИО"))
        self.label_3.setText(_translate("MainWindow", "Должность"))
        self.label_4.setText(_translate("MainWindow", "Логин"))
        self.label_5.setText(_translate("MainWindow", "Пароль"))
        self.register_btn.setText(_translate("MainWindow", "Зарегистрировать"))

    def open_auth_form(self):
        self.window = QMainWindow()
        self.ui = auth_form.Ui_MainWindow()
        self.ui.setupUi(self.window)
        self.window.show()

    def load_roles_from_bd(self):
        db = database
        select = db.sel_from_bd
        roles = select(None,'roles', 'name')
        # print(roles)
        self.role_cmb.addItems(roles)

    def add_acc_to_bd(self):
        try:
            iam = self.get_ouath_token()
            service_acc_name = self.login_txt.text()
            password = self.password_txt.text()
            role = self.role_cmb.currentIndex() + 1
            fio = self.fio_txt.text()
            created_acc = self.create_new_service_acc(iam, service_acc_name, '')
            service_acc_id = created_acc['accessKey']['serviceAccountId']
            static_key_id = created_acc['accessKey']['keyId']
            static_secret_key = created_acc['secret']
            # print(service_acc_id)
            fields = ['login', 'password', 'role', 'fio', 'service_acc_id', 'static_key_id', 'static_secret_key']
            values = [service_acc_name, password, role, fio, service_acc_id, static_key_id, static_secret_key]
            database.SQL.insert('', fields, values, 'accounts')
            f.ShowMessageBox('Успешно', 'Пользователь ' + service_acc_name + ' успешно зарегистрирован')
            self.open_auth_form()
        except Exception as error:
            f.ShowMessageBox('Ошибка', str(error))
        # db.dat = database

        # print(db.dat.SQL.select('','accounts'))

    def get_ouath_token(self):
        headers = {'Content-Type': 'application/x-www-form-urlencoded'}
        data = '{"yandexPassportOauthToken":"AQAAAABgj_I9AATuwUjVfFUeS0sZpzmfLz7UmPI"}'
        response = requests.post('https://iam.api.cloud.yandex.net/iam/v1/tokens', headers=headers, data=data)
        IAM_TOKEN = response.json()['iamToken']
        return IAM_TOKEN

        # {"name": "ggfgu", "description": "uioyh8uoyhu", "folderId": "b1g26uu7lpnb4jo3ph8v",
        # "rolesFolderId": "b1g26uu7lpnb4jo3ph8v", "roles": ["storage.uploader", "storage.viewer"]}

    def create_new_service_acc(self, iam_token, login, description):
        headers = {'Authorization': f'Bearer {iam_token}'}
        # cоздание сервисного аккаунта
        create_acc_json = {
            'folderId': 'b1g26uu7lpnb4jo3ph8v',
            'name': login,  # Имя нового сервис.акка
            'description': description,  # комментарий
            'roleId': 'storage-viewer'
        }
        create_acc_response = requests.post('https://iam.api.cloud.yandex.net/iam/v1/serviceAccounts', headers=headers,
                                            json=create_acc_json)
        service_acc_id = create_acc_response.json()['response']['id']
        # присвоение роли сервисному аккаунту
        set_role_json = {
            "accessBindingDeltas": [{
                "action": "ADD",
                "accessBinding": {
                    "roleId": 'storage.admin',
                    "subject": {
                        "id": service_acc_id,
                        "type": "serviceAccount"
                    }
                }
            }
            ]
        }
        set_role_response = requests.post(
            'https://resource-manager.api.cloud.yandex.net/resource-manager/v1/folders/b1g26uu7lpnb4jo3ph8v:updateAccessBindings',
            headers=headers, json=set_role_json)
        # создание статического ключа доступа
        get_static_key_json = {
            "serviceAccountId": service_acc_id,
            "description": "this key is for my bucket"
        }
        get_static_key_response = requests.post('https://iam.api.cloud.yandex.net/iam/aws-compatibility/v1/accessKeys',headers=headers, json=get_static_key_json)
        return get_static_key_response.json()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
